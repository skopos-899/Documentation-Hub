// Google Apps Script for Documentation Hub with Approval System
var sheetName = 'Sheet1';
var scriptProp = PropertiesService.getScriptProperties();

function initialSetup() {
  var activeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  scriptProp.setProperty('key', activeSpreadsheet.getId());
  
  // Set up sheet with correct headers if needed
  var sheet = activeSpreadsheet.getSheetByName(sheetName);
  if (sheet.getLastRow() === 0) {
    var headers = [
      'timestamp', 
      'docTitle', 
      'docDescription', 
      'docLink', 
      'docCategory', 
      'docPublisher', 
      'docEmail', 
      'approvalStatus', 
      'approvalDate'
    ];
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // Add data validation for approval status column
    var approvalStatusCell = sheet.getRange(2, 8, 1000, 1); // Column H, from row 2 to 1000
    var rule = SpreadsheetApp.newDataValidation()
      .requireValueInList(['Pending', 'Approved', 'Rejected'], true)
      .build();
    approvalStatusCell.setDataValidation(rule);
  }
}

function doGet(e) {
  try {
    // If no parameters, return error
    if (!e.parameter || !e.parameter.action) {
      return ContentService
        .createTextOutput(JSON.stringify({ 'result': 'error', 'error': 'No action specified' }))
        .setMimeType(ContentService.MimeType.JSON);
    }

    // Get the spreadsheet
    var doc = SpreadsheetApp.openById(scriptProp.getProperty('key'));
    var sheet = doc.getSheetByName(sheetName);
    
    // Handle URL checking
    if (e.parameter.action === 'checkUrl') {
      // URL must be provided
      if (!e.parameter.url) {
        return ContentService
          .createTextOutput(JSON.stringify({ 'result': 'error', 'error': 'No URL provided' }))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      // Get the URL to check
      var urlToCheck = e.parameter.url.trim().toLowerCase();
      
      // If sheet is empty or only has headers, URL is unique
      if (sheet.getLastRow() <= 1) {
        return ContentService
          .createTextOutput(JSON.stringify({ 'result': 'unique' }))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      // Find URL column index
      var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
      var urlColumnIndex = headers.indexOf('docLink');
      
      // If URL column doesn't exist, return error
      if (urlColumnIndex === -1) {
        return ContentService
          .createTextOutput(JSON.stringify({ 'result': 'error', 'error': 'URL column not found' }))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      // Get all data and check for duplicates
      var data = sheet.getRange(2, urlColumnIndex + 1, sheet.getLastRow() - 1, 1).getValues();
      
      // Check for duplicates (case-insensitive)
      for (var i = 0; i < data.length; i++) {
        var existingUrl = String(data[i][0]).trim().toLowerCase();
        if (existingUrl === urlToCheck) {
          return ContentService
            .createTextOutput(JSON.stringify({ 'result': 'duplicate' }))
            .setMimeType(ContentService.MimeType.JSON);
        }
      }
      
      // If no duplicates found, URL is unique
      return ContentService
        .createTextOutput(JSON.stringify({ 'result': 'unique' }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Handle fetching approved documents
    if (e.parameter.action === 'getApproved') {
      // If sheet is empty or only has headers, return empty array
      if (sheet.getLastRow() <= 1) {
        return ContentService
          .createTextOutput(JSON.stringify({ 'result': 'success', 'documents': [] }))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      // Get all data
      var data = sheet.getDataRange().getValues();
      var headers = data[0];
      
      // Find indices of relevant columns
      var approvalStatusIndex = headers.indexOf('approvalStatus');
      
      // If approval status column doesn't exist, return error
      if (approvalStatusIndex === -1) {
        return ContentService
          .createTextOutput(JSON.stringify({ 'result': 'error', 'error': 'Approval status column not found' }))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      // Filter only approved documents
      var approvedDocs = [];
      
      for (var i = 1; i < data.length; i++) {
        if (data[i][approvalStatusIndex] === 'Approved') {
          var doc = {};
          
          // Map each column to its corresponding property
          for (var j = 0; j < headers.length; j++) {
            doc[headers[j]] = data[i][j];
          }
          
          approvedDocs.push(doc);
        }
      }
      
      return ContentService
        .createTextOutput(JSON.stringify({ 'result': 'success', 'documents': approvedDocs }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // If action isn't recognized
    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'error', 'error': 'Invalid action' }))
      .setMimeType(ContentService.MimeType.JSON);
  } 
  catch (error) {
    // Log the error for debugging
    console.error('Error in doGet:', error);
    
    return ContentService
      .createTextOutput(JSON.stringify({ 
        'result': 'error', 
        'error': error.toString() 
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

function doPost(e) {
  var lock = LockService.getScriptLock();
  lock.tryLock(10000);
  
  try {
    var doc = SpreadsheetApp.openById(scriptProp.getProperty('key'));
    var sheet = doc.getSheetByName(sheetName);
    
    if (sheet.getLastRow() === 0) {
      initialSetup();
    }
    
    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    var nextRow = sheet.getLastRow() + 1;
    
    var newRow = headers.map(function(header) {
      if (header === 'timestamp') {
        return new Date();
      } else if (header === 'approvalStatus') {
        return 'Pending';
      } else if (header === 'approvalDate') {
        return '';
      } else {
        return e.parameter[header] || '';
      }
    });
    
    sheet.getRange(nextRow, 1, 1, newRow.length).setValues([newRow]);
    
    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'success', 'row': nextRow }))
      .setMimeType(ContentService.MimeType.JSON);
  } 
  catch (error) {
    console.error('Error in doPost:', error);
    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'error', 'error': error.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  } 
  finally {
    lock.releaseLock();
  }
}

// This function will automatically update the approvalDate when approvalStatus changes
function onEdit(e) {
  if (!e || !e.range) return;
  
  var sheet = e.range.getSheet();
  if (sheet.getName() !== sheetName) return;
  
  var editedRange = e.range;
  var editedRow = editedRange.getRow();
  var editedCol = editedRange.getColumn();
  
  var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  var approvalStatusCol = headers.indexOf('approvalStatus') + 1;
  var approvalDateCol = headers.indexOf('approvalDate') + 1;
  var emailCol = headers.indexOf('docEmail') + 1;
  var commentsCol = headers.indexOf('adminComments') + 1;
  
  if (editedCol === approvalStatusCol && editedRow > 1) {
    var newStatus = editedRange.getValue();
    var userEmail = sheet.getRange(editedRow, emailCol).getValue();
    var adminComments = sheet.getRange(editedRow, commentsCol).getValue();
    
    if (newStatus === 'Approved') { // Notify only when approved
      sheet.getRange(editedRow, approvalDateCol).setValue(new Date());
      notifyUser(userEmail, newStatus, adminComments);
    }
  }
}